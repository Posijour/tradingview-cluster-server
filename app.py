# app.py ‚Äî —Ä–∞–±–æ—á–∏–π —Å–µ—Ä–≤–µ—Ä —Å –≤–µ–±—Ö—É–∫–æ–º, –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ–π, –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏, –¥–∞—à–±–æ—Ä–¥–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
# –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ç–≤–æ–π Pine –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π Pine

import os, time, json, threading, csv, hmac, hashlib, html as _html, re
from datetime import datetime, timedelta
from collections import deque, defaultdict
from time import monotonic
from flask import Flask, request, jsonify
import requests

# =============== üîß –ù–ê–°–¢–†–û–ô–ö–ò ===============
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
CHAT_ID        = os.getenv("CHAT_ID", "766363011")

# –ö–ª–∞—Å—Ç–µ—Ä—ã
CLUSTER_WINDOW_MIN     = int(os.getenv("CLUSTER_WINDOW_MIN", "60"))     # –æ–∫–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö
CLUSTER_THRESHOLD      = int(os.getenv("CLUSTER_THRESHOLD", "6"))       # —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –º–æ–Ω–µ—Ç –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É, —á—Ç–æ–±—ã —ç—Ç–æ —Å—á–∏—Ç–∞–ª–æ—Å—å –∫–ª–∞—Å—Ç–µ—Ä–æ–º
CHECK_INTERVAL_SEC     = int(os.getenv("CHECK_INTERVAL_SEC", "60"))     # –∫–∞–∫ —á–∞—Å—Ç–æ –≤–æ—Ä–∫–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
VALID_TF               = os.getenv("VALID_TF", "15m")                   # –∫–∞–∫–æ–π tf –º—ã –≤–æ–æ–±—â–µ —É—á–∏—Ç—ã–≤–∞–µ–º
WEBHOOK_SECRET         = os.getenv("WEBHOOK_SECRET", "")                # –∑–∞—â–∏—Ç–∞ /webhook?key=...
CLUSTER_COOLDOWN_SEC   = int(os.getenv("CLUSTER_COOLDOWN_SEC", "300"))  # –∞–Ω—Ç–∏—Å–ø–∞–º –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤

# Bybit
BYBIT_API_KEY    = os.getenv("BYBIT_API_KEY", "")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET", "")
BYBIT_BASE_URL   = os.getenv("BYBIT_BASE_URL", "https://api-testnet.bybit.com")
TRADE_ENABLED    = os.getenv("TRADE_ENABLED", "false").lower() == "true"
MAX_RISK_USDT    = float(os.getenv("MAX_RISK_USDT", "50"))
LEVERAGE         = float(os.getenv("LEVERAGE", "5"))

# –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:
# –ø—Ä–∏–º–µ—Ä: SYMBOL_WHITELIST=BTCUSDT,ETHUSDT,SOLUSDT
SYMBOL_WHITELIST = set(
    s.strip().upper() for s in os.getenv("SYMBOL_WHITELIST","").split(",") if s.strip()
)

# –õ–æ–≥-—Ñ–∞–π–ª
LOG_FILE = "signals_log.csv"

# =============== üß† –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–¢–†–£–ö–¢–£–†–´ –°–û–°–¢–û–Ø–ù–ò–Ø ===============
signals = deque(maxlen=5000)  # (timestamp, ticker, direction, tf)
lock = threading.Lock()
state_lock = threading.Lock()
log_lock = threading.Lock()
last_cluster_sent = {"UP": 0.0, "DOWN": 0.0}

app = Flask(__name__)

# =============== üåê –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===============
tg_times = deque(maxlen=20)

MD_ESCAPE = re.compile(r'([_*\[\]()~`>#+\-=|{}.!])')
def md_escape(text: str) -> str:
    # —Ç–µ–ª–µ–≥—Ä–∞–º-–≤–µ—á–Ω—ã–π –∞–¥: —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å markdownv2
    return MD_ESCAPE.sub(r'\\\1', text)

def html_esc(x):
    # –¥–ª—è html-–¥—ç—à–±–æ—Ä–¥–æ–≤
    return _html.escape(str(x), quote=True)

# =============== üîê –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ /simulate) ===============
def verify_signature(secret, body, signature):
    mac = hmac.new(secret.encode(), body, hashlib.sha256).hexdigest()
    return hmac.compare_digest(mac, signature)

# =============== üì© Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –∞–Ω—Ç–∏—Ñ–ª—É–¥–æ–º ===============
def send_telegram(text: str):
    if not TELEGRAM_TOKEN or not CHAT_ID:
        print("‚ö†Ô∏è Telegram credentials missing.")
        return
    try:
        safe = md_escape(text)

        now = monotonic()
        tg_times.append(now)

        # –Ω–µ —á–∞—â–µ 1 —Å–æ–æ–±—â–µ–Ω–∏—è/—Å–µ–∫
        if len(tg_times) >= 2 and now - tg_times[-2] < 1.0:
            time.sleep(1.0 - (now - tg_times[-2]))

        # –Ω–µ –±–æ–ª—å—à–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
        if len(tg_times) == tg_times.maxlen and now - tg_times[0] < 60:
            time.sleep(60 - (now - tg_times[0]))

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
        def _send():
            try:
                requests.get(
                    f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                    params={"chat_id": CHAT_ID, "text": safe, "parse_mode": "MarkdownV2"},
                    timeout=8,
                )
                print("‚úÖ Sent to Telegram")
            except Exception as e:
                print("‚ùå Telegram error (inner thread):", e)

        threading.Thread(target=_send, daemon=True).start()

    except Exception as e:
        print("‚ùå Telegram error (outer):", e)

# =============== üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï —Å–∏–≥–Ω–∞–ª–æ–≤ –í CSV ===============
def log_signal(ticker, direction, tf, sig_type, entry=None, stop=None, target=None):
    row = [
        datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
        ticker,
        direction,
        tf,
        sig_type,
        entry or "",
        stop or "",
        target or ""
    ]

    try:
        with log_lock:
            create_header = not os.path.exists(LOG_FILE)
            with open(LOG_FILE, "a", newline="", encoding="utf-8") as f:
                w = csv.writer(f)
                if create_header:
                    w.writerow(["time_utc","ticker","direction","tf","type","entry","stop","target"])
                w.writerow(row)
        print(f"üìù Logged {sig_type} {ticker} {direction} {tf}")
    except Exception as e:
        print("‚ùå Log error:", e)

# =============== üîê BYBIT HELPERS ===============
def _bybit_sign(payload: dict):
    ts = str(int(time.time() * 1000))
    recv_window = "5000"
    body = json.dumps(payload) if payload else ""
    pre_sign = ts + BYBIT_API_KEY + recv_window + body
    sign = hmac.new(BYBIT_API_SECRET.encode(), pre_sign.encode(), hashlib.sha256).hexdigest()
    headers = {
        "X-BAPI-API-KEY": BYBIT_API_KEY,
        "X-BAPI-SIGN": sign,
        "X-BAPI-TIMESTAMP": ts,
        "X-BAPI-RECV-WINDOW": recv_window,
        "Content-Type": "application/json"
    }
    return headers, body

def bybit_post(path: str, payload: dict) -> dict:
    url = BYBIT_BASE_URL.rstrip("/") + path
    headers, body = _bybit_sign(payload)
    r = requests.post(url, headers=headers, data=body, timeout=10)
    try:
        j = r.json()
    except Exception:
        return {"http": r.status_code, "text": r.text}
    if j.get("retCode", 0) != 0:
        print("‚ùå Bybit error:", j)
    return j

def normalize_qty(symbol: str, qty: float) -> float:
    try:
        r = requests.get(
            f"{BYBIT_BASE_URL}/v5/market/instruments-info",
            params={"category": "linear", "symbol": symbol}, timeout=5
        ).json()
        info = (((r or {}).get("result") or {}).get("list") or [])[0]

        step = float(info.get("lotSizeFilter", {}).get("qtyStep", "0.001"))  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        precision = max(0, str(step)[::-1].find('.'))  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        normalized = max(step, (qty // step) * step)
        return float(f"{normalized:.{precision}f}")
    except Exception:
        return float(f"{qty:.6f}")

def calc_qty_from_risk(entry: float, stop: float, risk_usdt: float, symbol: str) -> float:
    # –°—á–∏—Ç–∞–µ–º "—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã —Ä–∏—Å–∫ –¥–æ —Å—Ç–æ–ø–∞ –±—ã–ª –Ω–µ –±–æ–ª—å—à–µ risk_usdt"
    risk_per_unit = abs(entry - stop)
    if risk_per_unit <= 0:
        return 0.0
    raw_qty = risk_usdt / risk_per_unit
    qty = normalize_qty(symbol, raw_qty)
    return float(f"{qty:.6f}")

def set_leverage(symbol: str, leverage: float):
    payload = {"category":"linear", "symbol":symbol, "buyLeverage":str(leverage), "sellLeverage":str(leverage)}
    return bybit_post("/v5/position/set-leverage", payload)

def place_order_market_with_tp_sl(symbol: str, side: str, qty: float, tp: float, sl: float):
    payload = {
        "category": "linear",
        "symbol": symbol,
        "side": side,            # "Buy" | "Sell"
        "orderType": "Market",
        "qty": str(qty),
        "timeInForce": "GoodTillCancel",
        "tpSlMode": "Full",
        "takeProfit": str(tp),
        "stopLoss": str(sl),
        "reduceOnly": False
    }
    return bybit_post("/v5/order/create", payload)

def get_atr(symbol: str, period: int = 14, interval: str = "15", limit: int = 100) -> float:
    """
    ATR –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º —Å–≤–µ—á–∞–º Bybit.
    Bybit –¥–∞—ë—Ç —Å–≤–µ—á–∏ newest-first, –º—ã –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤—ã–≤–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.
    """
    try:
        url = f"{BYBIT_BASE_URL}/v5/market/kline"
        params = {"category": "linear", "symbol": symbol, "interval": interval, "limit": limit}
        r = requests.get(url, params=params, timeout=5).json()
        candles = (((r or {}).get("result") or {}).get("list") or [])
        if not candles:
            return 0.0

        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp (–ø–æ–ª–µ [0])
        candles.sort(key=lambda c: int(c[0]))

        highs  = [float(c[2]) for c in candles]
        lows   = [float(c[3]) for c in candles]
        closes = [float(c[4]) for c in candles]

        trs = []
        for i in range(1, len(highs)):
            tr = max(
                highs[i] - lows[i],
                abs(highs[i] - closes[i - 1]),
                abs(lows[i]  - closes[i - 1])
            )
            trs.append(tr)

        if not trs:
            return 0.0

        lookback = min(period, len(trs))
        return sum(trs[-lookback:]) / lookback
    except Exception as e:
        print("ATR fetch error:", e)
        return 0.0

# =============== üîç –ü–ê–†–°–ï–† –í–•–û–î–Ø–©–ï–ì–û PAYLOAD ===============
def parse_payload(req) -> dict:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¢–í–û–ô —Ç–µ–∫—â–∏–π —Ñ–æ—Ä–º–∞—Ç Pine:
    {
      "type":"MTF",
      "ticker":"BYBIT:BTCUSDT.P",
      "direction":"UP"|"DOWN",
      "entry":12345,
      "stop":12300,
      "target":12400,
      "message":"—Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ç–µ–ª–µ–≥–∏"
      // tf –∏–Ω–æ–≥–¥–∞ –µ—Å—Ç—å, –∏–Ω–æ–≥–¥–∞ –Ω–µ—Ç
    }
    """
    data = request.get_json(silent=True) or {}
    if not data:
        try:
            data = json.loads(req.data)
        except Exception:
            data = {}

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–∫–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Bybit:
    # "BYBIT:BTCUSDT.P" -> "BTCUSDT"
    ticker_clean = (
        data.get("ticker","")
        .replace("BYBIT:", "")
        .replace(".P", "")
        .upper()
    )

    return {
        "type":      str(data.get("type", "")).upper(),
        "ticker":    ticker_clean,
        "direction": str(data.get("direction", "")).upper(),
        "tf":        str(data.get("tf", "15m")).lower(),  # –µ—Å–ª–∏ tf –Ω–µ –ø—Ä–∏—à—ë–ª –∏–∑ Pine, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ 15m
        "message":   data.get("message", ""),
        "entry":     data.get("entry"),
        "stop":      data.get("stop"),
        "target":    data.get("target"),
    }

# =============== üîî –í–ï–ë–•–£–ö –û–¢ TRADINGVIEW ===============
@app.route("/webhook", methods=["POST"])
def webhook():
    # –ø—Ä–æ—Å—Ç–µ–π—à–∞—è –∑–∞—â–∏—Ç–∞ url ?key=SECRET
    if WEBHOOK_SECRET:
        key = request.args.get("key", "")
        if key != WEBHOOK_SECRET:
            return "forbidden", 403

    payload = parse_payload(request)

    typ        = payload.get("type", "")
    tf         = payload.get("tf", "")
    msg        = payload.get("message", "")
    ticker     = payload.get("ticker", "")
    direction  = payload.get("direction", "")
    entry      = payload.get("entry")
    stop       = payload.get("stop")
    target     = payload.get("target")

    # 1) –£ —Ç–µ–±—è Pine –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –≤ message.
    # –ï—Å–ª–∏ message –µ—Å—Ç—å ‚Äî —ç—Ç–æ ¬´–±–æ–µ–≤–æ–π¬ª —Å–∏–≥–Ω–∞–ª.
    if msg:
        # –∫–∏–Ω—É—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
        send_telegram(msg)
        print(f"üì® Forwarded MTF alert: {ticker} {direction}")

        # –ª–æ–≥ + –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        if ticker and direction in ("UP","DOWN") and tf == VALID_TF:
            now = time.time()
            with lock:
                signals.append((now, ticker, direction, tf))

            log_signal(
                ticker,
                direction,
                tf,
                "MTF",
                entry,
                stop,
                target
            )

        # –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ –æ–¥–∏–Ω–æ—á–Ω–æ–º—É MTF —Å–∏–≥–Ω–∞–ª—É
        if TRADE_ENABLED and typ == "MTF":
            try:
                if not (ticker and direction in ("UP","DOWN")):
                    print("‚õî –ù–µ—Ç symbol/direction ‚Äî –ø—Ä–æ–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏")
                elif SYMBOL_WHITELIST and ticker not in SYMBOL_WHITELIST:
                    print(f"‚õî {ticker} –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                elif entry and stop and target:
                    # —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–∞:
                    # direction "UP" -> —à–æ—Ä—Ç
                    # direction "DOWN" -> –ª–æ–Ω–≥
                    side = "Sell" if direction == "UP" else "Buy"

                    set_leverage(ticker, LEVERAGE)

                    qty = calc_qty_from_risk(
                        float(entry),
                        float(stop),
                        MAX_RISK_USDT,
                        ticker
                    )

                    if qty > 0:
                        resp = place_order_market_with_tp_sl(
                            ticker,
                            side,
                            qty,
                            float(target),
                            float(stop)
                        )
                        print("Bybit order resp:", resp)
                        send_telegram(
                            f"üöÄ *AUTO-TRADE*\n"
                            f"{ticker} {side}\n"
                            f"Qty: {qty}\n"
                            f"Entry~{entry}\nTP: {target}\nSL: {stop}"
                        )
                else:
                    print("‚ÑπÔ∏è –ù–µ—Ç entry/stop/target ‚Äî –ø—Ä–æ–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏")
            except Exception as e:
                print("Trade error:", e)

        return jsonify({"status": "forwarded"}), 200

    # 2) fallback: –≤–¥—Ä—É–≥ Pine –ø—Ä–∏—à–ª—ë—Ç –±–µ–∑ message
    if typ == "MTF" and tf == VALID_TF:
        if ticker and direction in ("UP", "DOWN"):
            now = time.time()
            with lock:
                signals.append((now, ticker, direction, tf))
            log_signal(ticker, direction, tf, "MTF", entry, stop, target)
            print(f"‚úÖ {ticker} {direction} ({tf}) added for cluster window")
            return jsonify({"status": "ok"}), 200

    # –Ω–∏—á–µ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ
    return jsonify({"status": "ignored"}), 200

# =============== üß† –ö–õ–ê–°–¢–ï–†-–í–û–†–ö–ï–† ===============
def cluster_worker():
    while True:
        try:
            now = time.time()
            cutoff = now - CLUSTER_WINDOW_MIN * 60

            # —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ —Å—á–∏—Ç–∞–µ–º –∞–ø—ã/–¥–∞—É–Ω—ã
            with lock:
                while signals and signals[0][0] < cutoff:
                    signals.popleft()

                ups, downs, tickers_seen = set(), set(), set()
                for (_, t, d, _) in signals:
                    tickers_seen.add(t)
                    if d == "UP":
                        ups.add(t)
                    elif d == "DOWN":
                        downs.add(t)

            # —à–ª—ë–º –∫–ª–∞—Å—Ç–µ—Ä—ã –≤ —Ç–µ–ª–µ–≥—É –∏ –ª–æ–≥, –Ω–æ –Ω–µ —á–∞—â–µ cooldown
            with state_lock:
                if len(ups) >= CLUSTER_THRESHOLD:
                    if now - last_cluster_sent["UP"] >= CLUSTER_COOLDOWN_SEC:
                        msg = (
                            f"üü¢ *CLUSTER UP* ‚Äî {len(ups)} –∏–∑ {len(tickers_seen)} –º–æ–Ω–µ—Ç "
                            f"(TF {VALID_TF}, {CLUSTER_WINDOW_MIN} –º–∏–Ω)\n"
                            f"üìà {', '.join(sorted(list(ups)))}"
                        )
                        send_telegram(msg)
                        log_signal(",".join(sorted(list(ups))), "UP", VALID_TF, "CLUSTER")
                        last_cluster_sent["UP"] = now

                if len(downs) >= CLUSTER_THRESHOLD:
                    if now - last_cluster_sent["DOWN"] >= CLUSTER_COOLDOWN_SEC:
                        msg = (
                            f"üî¥ *CLUSTER DOWN* ‚Äî {len(downs)} –∏–∑ {len(tickers_seen)} –º–æ–Ω–µ—Ç "
                            f"(TF {VALID_TF}, {CLUSTER_WINDOW_MIN} –º–∏–Ω)\n"
                            f"üìâ {', '.join(sorted(list(downs)))}"
                        )
                        send_telegram(msg)
                        log_signal(",".join(sorted(list(downs))), "DOWN", VALID_TF, "CLUSTER")
                        last_cluster_sent["DOWN"] = now

            # –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
            if TRADE_ENABLED:
                try:
                    direction, ticker = None, None

                    # –≤—ã–±–∏—Ä–∞–µ–º –ª—é–±—É—é –º–æ–Ω–µ—Ç—É –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–∞
                    if len(ups) >= CLUSTER_THRESHOLD and ups:
                        direction = "UP"
                        ticker = list(ups)[0]
                    elif len(downs) >= CLUSTER_THRESHOLD and downs:
                        direction = "DOWN"
                        ticker = list(downs)[0]

                    if ticker and direction:
                        if SYMBOL_WHITELIST and ticker not in SYMBOL_WHITELIST:
                            print(f"‚õî {ticker} –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
                        else:
                            # —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                            resp = requests.get(
                                f"{BYBIT_BASE_URL}/v5/market/tickers",
                                params={"category": "linear", "symbol": ticker},
                                timeout=5
                            ).json()
                            entry_price = float(resp["result"]["list"][0]["lastPrice"])

                            # ATR-–ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–æ–ø–∞/—Ç–∞—Ä–≥–µ—Ç–∞
                            atr_val = get_atr(ticker, period=14, interval="15")
                            atr_base = get_atr(ticker, period=100, interval="15")
                            vol_scale = max(0.7, min(atr_val / max(atr_base, 0.0001), 1.3))

                            rr_stop   = atr_val * 0.8 * vol_scale
                            rr_target = atr_val * 2.4 * vol_scale

                            stop_price   = entry_price + rr_stop   if direction == "UP"   else entry_price - rr_stop
                            target_price = entry_price - rr_target if direction == "UP"   else entry_price + rr_target

                            side = "Sell" if direction == "UP" else "Buy"

                            set_leverage(ticker, LEVERAGE)
                            qty = calc_qty_from_risk(entry_price, stop_price, MAX_RISK_USDT, ticker)

                            if qty <= 0:
                                raise ValueError("Qty <= 0 after normalization")

                            resp2 = place_order_market_with_tp_sl(
                                ticker,
                                side,
                                qty,
                                target_price,
                                stop_price
                            )
                            print(f"üí• Cluster auto-trade {ticker} {side} -> TP:{target_price}, SL:{stop_price}")
                            send_telegram(
                                f"‚ö° *CLUSTER AUTO-TRADE*\n"
                                f"{ticker} {side}\n"
                                f"Qty: {qty}\n"
                                f"Entry~{entry_price}\nTP: {target_price}\nSL: {stop_price}"
                            )

                except Exception as e:
                    print("‚ùå Cluster auto-trade error:", e)

            time.sleep(CHECK_INTERVAL_SEC)

        except Exception as e:
            # –Ω–µ —É–º–∏—Ä–∞—Ç—å –≤–æ–æ–±—â–µ –Ω–∏–∫–æ–≥–¥–∞
            print("üíÄ cluster_worker crashed, restarting in 10s:", e)
            time.sleep(10)

# =============== üíô HEARTBEAT –í –¢–ï–õ–ï–ì–£ ===============
def heartbeat_loop():
    sent_today = None
    while True:
        try:
            now_utc = datetime.utcnow()
            local_time = now_utc + timedelta(hours=2)  # UTC+2 —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ
            if local_time.hour == 3 and sent_today != local_time.date():
                msg = (
                    f"ü©µ *HEARTBEAT*\n"
                    f"Server alive ‚úÖ\n"
                    f"‚è∞ {local_time.strftime('%H:%M %d-%m-%Y')} UTC+2"
                )
                send_telegram(msg)
                print("üí¨ Heartbeat sent to Telegram.")
                sent_today = local_time.date()
        except Exception as e:
            print("‚ùå Heartbeat error:", e)
        time.sleep(60)

# =============== üìä DASHBOARD (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã) ===============
@app.route("/dashboard")
def dashboard():
    html = [
        "<h2>üìà Active Signals Dashboard</h2>",
        "<table border='1' cellpadding='4'>",
        "<tr><th>Time (UTC)</th><th>Ticker</th><th>Direction</th><th>TF</th>"
        "<th>Type</th><th>Entry</th><th>Stop</th><th>Target</th></tr>"
    ]

    try:
        if not os.path.exists(LOG_FILE):
            html.append("<tr><td colspan='8'>‚ö†Ô∏è No log file found</td></tr>")
        else:
            with log_lock:
                with open(LOG_FILE, "r", encoding="utf-8") as f:
                    lines = f.readlines()[-50:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫

            rows = []
            for line in lines:
                parts = [p.strip() for p in line.strip().split(",")]

                if len(parts) < 5:
                    continue

                # —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ
                while len(parts) < 8:
                    parts.append("")

                t, ticker, direction, tf, sig_type, entry, stop, target = parts[:8]

                color = "#d4ffd4" if direction == "UP" else "#ffd4d4" if direction == "DOWN" else "#f4f4f4"

                row = (
                    f"<tr style='background-color:{color}'>"
                    f"<td>{html_esc(t)}</td>"
                    f"<td>{html_esc(ticker)}</td>"
                    f"<td>{html_esc(direction)}</td>"
                    f"<td>{html_esc(tf)}</td>"
                    f"<td>{html_esc(sig_type)}</td>"
                    f"<td>{html_esc(entry)}</td>"
                    f"<td>{html_esc(stop)}</td>"
                    f"<td>{html_esc(target)}</td>"
                    f"</tr>"
                )

                rows.append(row)

            if rows:
                html.extend(reversed(rows))
            else:
                html.append("<tr><td colspan='8'>‚ö†Ô∏è No valid log entries</td></tr>")

    except Exception as e:
        html.append(f"<tr><td colspan='8'>‚ö†Ô∏è Error reading log: {html_esc(e)}</td></tr>")

    html.append("</table>")
    html.append(
        f"<p style='color:gray'>Updated {html_esc(datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC'))}</p>"
    )
    html.append(
        "<p style='font-size:small;color:gray'>Showing last 50 entries from log</p>"
    )

    return "\n".join(html)

# =============== üìä /stats (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) ===============
@app.route("/stats")
def stats():
    if not os.path.exists(LOG_FILE):
        return "<h3>‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h3>", 200

    try:
        rows = []
        with log_lock:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                for r in csv.reader(f):
                    if len(r) >= 5:
                        rows.append(r)

        parsed = []
        for r in rows:
            try:
                ts = datetime.strptime(r[0], "%Y-%m-%d %H:%M:%S")
                ticker, direction, tf, typ = r[1], r[2], r[3], r[4]
                entry  = float(r[5]) if len(r) > 5 and r[5] else None
                stop   = float(r[6]) if len(r) > 6 and r[6] else None
                target = float(r[7]) if len(r) > 7 and r[7] else None
                parsed.append((ts, ticker, direction, tf, typ, entry, stop, target))
            except Exception:
                continue

        now = datetime.utcnow()
        last_24h = now - timedelta(hours=24)
        last_7d  = now - timedelta(days=7)

        total         = len(parsed)
        total_24h     = sum(1 for x in parsed if x[0] >= last_24h)
        mtf_count     = sum(1 for x in parsed if x[4] == "MTF")
        cluster_count = sum(1 for x in parsed if x[4] == "CLUSTER")
        up_count      = sum(1 for x in parsed if x[2] == "UP")
        down_count    = sum(1 for x in parsed if x[2] == "DOWN")

        with_prices = [x for x in parsed if x[5] and x[6] and x[7]]
        avg_entry  = sum(x[5] for x in with_prices) / len(with_prices) if with_prices else 0
        avg_stop   = sum(x[6] for x in with_prices) / len(with_prices) if with_prices else 0
        avg_target = sum(x[7] for x in with_prices) / len(with_prices) if with_prices else 0

        # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
        last_signals = with_prices[-10:]
        last_rows_html = "".join(
            f"<tr>"
            f"<td>{html_esc(x[0].strftime('%Y-%m-%d %H:%M'))}</td>"
            f"<td>{html_esc(x[1])}</td>"
            f"<td>{html_esc(x[2])}</td>"
            f"<td>{x[5]}</td>"
            f"<td>{x[6]}</td>"
            f"<td>{x[7]}</td>"
            f"<td>{html_esc(x[4])}</td>"
            f"</tr>"
            for x in reversed(last_signals)
        )

        # –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –∑–∞ 7 –¥–Ω–µ–π
        daily = defaultdict(lambda: {"MTF":0, "CLUSTER":0})
        for ts, _, _, _, typ, *_ in parsed:
            if ts >= last_7d:
                key = ts.date().isoformat()
                if typ in ("MTF","CLUSTER"):
                    daily[key][typ] += 1

        daily_html = "".join(
            f"<tr>"
            f"<td>{html_esc(d)}</td>"
            f"<td>{v['MTF']}</td>"
            f"<td>{v['CLUSTER']}</td>"
            f"</tr>"
            for d, v in sorted(daily.items())
        )

        html = f"""
        <h2>üìä TradingView Signals Stats (7d)</h2>
        <ul>
          <li>–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: <b>{total}</b></li>
          <li>–ó–∞ 24 —á–∞—Å–∞: <b>{total_24h}</b></li>
          <li>MTF: <b>{mtf_count}</b> | Cluster: <b>{cluster_count}</b></li>
          <li>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî üü¢ UP: <b>{up_count}</b> | üî¥ DOWN: <b>{down_count}</b></li>
        </ul>

        <h3>üìà –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã —Å–∏–≥–Ω–∞–ª–æ–≤</h3>
        <ul>
          <li>Entry: <b>{avg_entry:.2f}</b></li>
          <li>Stop: <b>{avg_stop:.2f}</b></li>
          <li>Target: <b>{avg_target:.2f}</b></li>
        </ul>

        <h3>üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤</h3>
        <table border="1" cellpadding="4">
          <tr><th>–í—Ä–µ–º—è (UTC)</th><th>–¢–∏–∫–µ—Ä</th><th>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</th><th>Entry</th><th>Stop</th><th>Target</th><th>–¢–∏–ø</th></tr>
          {last_rows_html if last_rows_html else '<tr><td colspan="7">–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤</td></tr>'}
        </table>

        <h4>üìÖ –ü–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7):</h4>
        <table border="1" cellpadding="4">
          <tr><th>–î–∞—Ç–∞ (UTC)</th><th>MTF</th><th>CLUSTER</th></tr>
          {daily_html if daily_html else '<tr><td colspan="3">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>'}
        </table>

        <p style='color:gray'>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {html_esc(now.strftime("%H:%M:%S UTC"))}</p>
        """
        return html, 200

    except Exception as e:
        return f"<h3>‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {html_esc(e)}</h3>", 500

# =============== üß™ /simulate ‚Äî —Ç–µ—Å—Ç —Ä—É–∫–∞–º–∏ –±–µ–∑ TradingView ===============
@app.route("/simulate", methods=["POST"])
def simulate():
    # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞—â–∏—Ç–∞: –º–æ–∂–Ω–æ —à–ª—ë–ø–∞—Ç—å —Ö—ç—à-—Å–∏–≥–Ω–∞—Ç—É—Ä—É
    if WEBHOOK_SECRET:
        sig = request.headers.get("X-Webhook-Signature", "")
        raw = request.get_data()
        if not verify_signature(WEBHOOK_SECRET, raw, sig):
            return "forbidden", 403
    try:
        data = request.get_json(force=True, silent=True) or {}
        ticker    = str(data.get("ticker", "BTCUSDT")).upper()
        direction = str(data.get("direction", "UP")).upper()
        entry     = float(data.get("entry", 68000))
        stop      = float(data.get("stop", 67500))
        target    = float(data.get("target", 69000))
        tf        = str(data.get("tf", VALID_TF))

        msg = (
            f"üìä *SIMULATED SIGNAL*\n"
            f"{ticker} {direction} ({tf})\n"
            f"Entry: {entry}\nStop: {stop}\nTarget: {target}\n"
            f"‚è∞ {datetime.utcnow().strftime('%H:%M:%S UTC')}"
        )

        log_signal(ticker, direction, tf, "SIMULATED", entry, stop, target)
        send_telegram(msg)

        print(f"üß™ Simulated signal sent for {ticker} {direction}")
        return jsonify({
            "status": "ok",
            "ticker": ticker,
            "direction": direction,
            "entry": entry,
            "stop": stop,
            "target": target,
            "tf": tf
        }), 200

    except Exception as e:
        return jsonify({"status": "error", "error": str(e)}), 500

# =============== HEALTH / HEARTBEAT ===============
@app.route("/")
def root():
    return "OK", 200

@app.route("/health")
def health():
    return "OK", 200

# =============== MAIN ===============
if __name__ == "__main__":
    port = int(os.getenv("PORT", "8080"))

    # –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=cluster_worker, daemon=True).start()
    threading.Thread(target=heartbeat_loop, daemon=True).start()

    # –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    app.run(host="0.0.0.0", port=port)

