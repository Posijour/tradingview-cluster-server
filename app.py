# app.py
import os, time, json, threading, csv
from datetime import datetime, timedelta
from collections import deque
from flask import Flask, request, jsonify
import requests

# === üîß –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
CHAT_ID        = os.getenv("CHAT_ID", "766363011")

# === –ü–ê–†–ê–ú–ï–¢–†–´ –ö–õ–ê–°–¢–ï–†–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===
CLUSTER_WINDOW_MIN = int(os.getenv("CLUSTER_WINDOW_MIN", "60"))   # –æ–∫–Ω–æ X –º–∏–Ω
CLUSTER_THRESHOLD  = int(os.getenv("CLUSTER_THRESHOLD", "6"))     # N –º–æ–Ω–µ—Ç
CHECK_INTERVAL_SEC = int(os.getenv("CHECK_INTERVAL_SEC", "60"))   # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ N —Å–µ–∫
VALID_TF = os.getenv("VALID_TF", "15m")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")                  # ?key=... –¥–ª—è –∑–∞—â–∏—Ç—ã

# === –•–†–ê–ù–ò–õ–ò–©–ï –°–ò–ì–ù–ê–õ–û–í ===
signals = deque()  # —ç–ª–µ–º–µ–Ω—Ç—ã: (time, ticker, direction, tf)
lock = threading.Lock()

# –ê–Ω—Ç–∏–¥—É–±–ª—å –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
last_cluster_sent = {"UP": 0.0, "DOWN": 0.0}
CLUSTER_COOLDOWN_SEC = int(os.getenv("CLUSTER_COOLDOWN_SEC", "300"))

# === –ü–£–¢–¨ –ö –õ–û–ì–£ ===
LOG_FILE = "signals_log.csv"

app = Flask(__name__)

# === üì© –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –í TELEGRAM ===
def send_telegram(text: str):
    if not TELEGRAM_TOKEN or not CHAT_ID:
        print("‚ö†Ô∏è Telegram credentials missing.")
        return
    try:
        requests.get(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            params={"chat_id": CHAT_ID, "text": text, "parse_mode": "Markdown"},
            timeout=5,
        )
        print("‚úÖ Sent to Telegram")
    except Exception as e:
        print("‚ùå Telegram error:", e)

# === üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–ò–ì–ù–ê–õ–û–í ===
def log_signal(ticker, direction, tf, sig_type):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ CSV"""
    try:
        with open(LOG_FILE, "a", newline="") as f:
            writer = csv.writer(f)
            writer.writerow([
                datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                ticker,
                direction,
                tf,
                sig_type
            ])
        print(f"üìù Logged {sig_type} {ticker} {direction} {tf}")
    except Exception as e:
        print("‚ùå Log error:", e)

# === üîç –†–ê–ó–ë–û–† –ü–û–õ–£–ß–ï–ù–ù–û–ì–û PAYLOAD ===
def parse_payload(req) -> dict:
    try:
        data = request.get_json(silent=True) or {}
    except:
        data = {}
    # –µ—Å–ª–∏ JSON –ø—É—Å—Ç–æ–π ‚Äî –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
    if not data:
        raw = req.get_data(as_text=True) or ""
        try:
            data = json.loads(raw)
        except:
            data = {}

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á–∏
    return {
        "type": data.get("type", "").upper(),
        "ticker": data.get("ticker", ""),
        "direction": data.get("direction", "").upper(),
        "tf": data.get("tf", "").lower(),
        "message": data.get("message", ""),
    }

# === üîî –û–ë–†–ê–ë–û–¢–ö–ê –í–ï–ë–•–£–ö–û–í –û–¢ TRADINGVIEW ===
@app.route("/webhook", methods=["POST"])
def webhook():
    if WEBHOOK_SECRET:
        key = request.args.get("key", "")
        if key != WEBHOOK_SECRET:
            return "forbidden", 403

    payload = parse_payload(request)
    typ = payload.get("type", "")
    tf  = payload.get("tf", "")
    msg = payload.get("message", "")

    # 1Ô∏è‚É£ –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "message" ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ –≤ Telegram
    if msg:
        send_telegram(msg)
        print(f"üì® Forwarded MTF alert: {payload.get('ticker')} {payload.get('direction')}")
        # –ø—Ä–∏ —ç—Ç–æ–º —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞
        ticker    = payload.get("ticker", "")
        direction = payload.get("direction", "")
        if ticker and direction in ("UP", "DOWN") and tf == VALID_TF:
            now = time.time()
            with lock:
                signals.append((now, ticker, direction, tf))
            log_signal(ticker, direction, tf, "MTF")
        return jsonify({"status": "forwarded"}), 200

    # 2Ô∏è‚É£ –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–µ—Å–ª–∏ message –Ω–µ—Ç, –Ω–æ –ø—Ä–∏—à—ë–ª –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª)
    if typ == "MTF" and tf == VALID_TF:
        ticker    = payload.get("ticker", "")
        direction = payload.get("direction", "")
        if ticker and direction in ("UP", "DOWN"):
            now = time.time()
            with lock:
                signals.append((now, ticker, direction, tf))
            log_signal(ticker, direction, tf, "MTF")
            print(f"‚úÖ {ticker} {direction} ({tf}) added for cluster window")
            return jsonify({"status": "ok"}), 200

    return jsonify({"status": "ignored"}), 200

# === üß† –§–û–ù–û–í–´–ô –ö–õ–ê–°–¢–ï–†–ù–´–ô –ê–ù–ê–õ–ò–ó ===
def cluster_worker():
    while True:
        try:
            now = time.time()
            cutoff = now - CLUSTER_WINDOW_MIN * 60

            with lock:
                while signals and signals[0][0] < cutoff:
                    signals.popleft()

                ups, downs, tickers_seen = set(), set(), set()
                for (_, t, d, _) in signals:
                    tickers_seen.add(t)
                    if d == "UP":
                        ups.add(t)
                    if d == "DOWN":
                        downs.add(t)

            # UP –∫–ª–∞—Å—Ç–µ—Ä
            if len(ups) >= CLUSTER_THRESHOLD:
                if now - last_cluster_sent["UP"] >= CLUSTER_COOLDOWN_SEC:
                    msg = (
                        f"üü¢ *CLUSTER UP* ‚Äî {len(ups)} –∏–∑ {len(tickers_seen)} –º–æ–Ω–µ—Ç "
                        f"(TF {VALID_TF}, {CLUSTER_WINDOW_MIN} –º–∏–Ω)\n"
                        f"üìà {', '.join(sorted(list(ups)))}"
                    )
                    send_telegram(msg)
                    log_signal(",".join(sorted(list(ups))), "UP", VALID_TF, "CLUSTER")
                    last_cluster_sent["UP"] = now

            # DOWN –∫–ª–∞—Å—Ç–µ—Ä
            if len(downs) >= CLUSTER_THRESHOLD:
                if now - last_cluster_sent["DOWN"] >= CLUSTER_COOLDOWN_SEC:
                    msg = (
                        f"üî¥ *CLUSTER DOWN* ‚Äî {len(downs)} –∏–∑ {len(tickers_seen)} –º–æ–Ω–µ—Ç "
                        f"(TF {VALID_TF}, {CLUSTER_WINDOW_MIN} –º–∏–Ω)\n"
                        f"üìâ {', '.join(sorted(list(downs)))}"
                    )
                    send_telegram(msg)
                    log_signal(",".join(sorted(list(downs))), "DOWN", VALID_TF, "CLUSTER")
                    last_cluster_sent["DOWN"] = now

        except Exception as e:
            print("‚ùå cluster_worker error:", e)

        time.sleep(CHECK_INTERVAL_SEC)

# === ‚è∞ –ï–ñ–ï–î–ù–ï–í–ù–´–ô HEARTBEAT (Telegram ping –≤ 03:00 UTC+2) ===
def heartbeat_loop():
    import datetime

    sent_today = None
    while True:
        try:
            now_utc = datetime.datetime.utcnow()
            local_time = now_utc + datetime.timedelta(hours=2)
            if local_time.hour == 3 and (sent_today != local_time.date()):
                msg = (
                    f"ü©µ *HEARTBEAT*\n"
                    f"Server alive ‚úÖ\n"
                    f"‚è∞ {local_time.strftime('%H:%M %d-%m-%Y')} UTC+2"
                )
                send_telegram(msg)
                print("üí¨ Heartbeat sent to Telegram.")
                sent_today = local_time.date()
        except Exception as e:
            print("‚ùå Heartbeat error:", e)
        time.sleep(60)

# === üåê –ü–†–û–°–¢–û–ô DASHBOARD ===
@app.route("/dashboard")
def dashboard():
    html = ["<h2>üìà Active Signals Dashboard</h2><table border='1' cellpadding='4'>"]
    html.append("<tr><th>Time (UTC)</th><th>Ticker</th><th>Direction</th><th>TF</th><th>Type</th></tr>")
    try:
        rows = []
        with open(LOG_FILE, "r") as f:
            for line in f.readlines()[-30:]:
                t, ticker, direction, tf, sig_type = line.strip().split(",")
                rows.append(f"<tr><td>{t}</td><td>{ticker}</td><td>{direction}</td><td>{tf}</td><td>{sig_type}</td></tr>")
        html.extend(rows)
    except Exception as e:
        html.append(f"<tr><td colspan='5'>‚ö†Ô∏è No logs yet ({e})</td></tr>")
    html.append("</table><p style='color:gray'>Updated {}</p>".format(datetime.utcnow().strftime("%H:%M:%S UTC")))
    return "\n".join(html)

# === –ó–ê–ü–£–°–ö –§–û–ù–û–í–´–• –ü–û–¢–û–ö–û–í ===
threading.Thread(target=cluster_worker, daemon=True).start()
threading.Thread(target=heartbeat_loop, daemon=True).start()

@app.route("/")
def root():
    return "OK", 200

@app.route("/health", methods=["GET"])
def health():
    return "OK", 200

@app.route("/test")
def test_ping():
    send_telegram("üß™ Test ping from Render server ‚Äî connection OK.")
    return "Test sent", 200

if __name__ == "__main__":
    port = int(os.getenv("PORT", "8080"))
    app.run(host="0.0.0.0", port=port)












