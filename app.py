# app.py
import os, time, json, threading, hashlib
from collections import deque, defaultdict
from flask import Flask, request, jsonify
import requests

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ª—É—á—à–µ —á–µ—Ä–µ–∑ ENV) ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
CHAT_ID        = os.getenv("CHAT_ID", "766363011")

# –û–∫–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏ –ø–æ—Ä–æ–≥
CLUSTER_WINDOW_MIN = int(os.getenv("CLUSTER_WINDOW_MIN", "60"))  # X –º–∏–Ω—É—Ç –æ–∫–Ω–∞
CLUSTER_THRESHOLD  = int(os.getenv("CLUSTER_THRESHOLD", "6"))    # N –º–æ–Ω–µ—Ç
CHECK_INTERVAL_SEC = int(os.getenv("CHECK_INTERVAL_SEC", "60"))  # –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑ –≤ N —Å–µ–∫

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¢–§ (–∫–ª–∞—Å—Ç–µ—Ä —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ 15m)
VALID_TF = os.getenv("VALID_TF", "15m")

# –°–µ–∫—Ä–µ—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–æ–±–∞–≤—å ?key=... –≤ TV)
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")  # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ ===
# –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å (time, ticker, direction, tf)
signals = deque()  # –∑–∞ –æ–∫–Ω–æ CLUSTER_WINDOW_MIN
lock = threading.Lock()

# –î–ª—è –∞–Ω—Ç–∏–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä-—Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ —Å–ª–∞—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –∫–∞–∂–¥—ã–µ N —Å–µ–∫)
last_cluster_sent = {"UP": 0.0, "DOWN": 0.0}
CLUSTER_COOLDOWN_SEC = int(os.getenv("CLUSTER_COOLDOWN_SEC", "300"))  # 5 –º–∏–Ω—É—Ç

app = Flask(__name__)

def send_telegram(text: str):
    try:
        requests.get(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            params={"chat_id": CHAT_ID, "text": text},
            timeout=5,
        )
    except Exception as e:
        print("Telegram error:", e)

def parse_payload(req) -> dict:
    """
    –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—è:
    type, ticker, direction, tf
    –ü–æ–Ω–∏–º–∞–µ—Ç –∏ JSON, –∏ raw-—Ç–µ–∫—Å—Ç (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç).
    """
    data = {}
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º JSON
        data = request.get_json(silent=True) or {}
        # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        if not data:
            raw = req.get_data(as_text=True) or ""
            # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–¥–µ—Ä–Ω—É—Ç—å –ø–æ–ª—è –ø—Ä–æ—Å—Ç—ã–º–∏ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞–º–∏
            # –ü—Ä–∏–º–µ—Ä: {"type":"MTF","ticker":"BTCUSDT","tf":"15m","direction":"UP"}
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, —Ç–æ —Ö–æ—Ç—å –∫–∞–∫-—Ç–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            for key in ["type", "ticker", "tf", "direction"]:
                # –≥—Ä—É–±—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞ —Å–ª—É—á–∞–π —Ç–µ–∫—Å—Ç–æ–≤
                marker = f"\"{key}\":"
                if marker in raw:
                    try:
                        # –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –≤—ã—Ü–µ–ø–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                        part = raw.split(marker, 1)[1]
                        val = part.split('"')[1]
                        data[key] = val
                    except:
                        pass
    except:
        pass

    # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –æ–∂–∏–¥–∞–µ–º—ã–º –∫–ª—é—á–∞–º + –¥–µ—Ñ–æ–ª—Ç—ã
    return {
        "type": data.get("type", "").upper(),
        "ticker": data.get("ticker", ""),
        "direction": data.get("direction", "").upper(),
        "tf": data.get("tf", "").lower(),
    }

@app.route("/webhook", methods=["POST"])
def webhook():
    # –ø—Ä–æ—Å—Ç–æ–π —Å–µ–∫—Ä–µ—Ç —á–µ—Ä–µ–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä ?key=...
    if WEBHOOK_SECRET:
        key = request.args.get("key", "")
        if key != WEBHOOK_SECRET:
            return "forbidden", 403

    payload = parse_payload(request)
    typ = payload.get("type", "")
    tf  = payload.get("tf", "")

    # –ù—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ MTF-—Å–∏–≥–Ω–∞–ª—ã –Ω–∞ 15m
    if typ != "MTF" or tf != VALID_TF:
        return jsonify({"status":"ignored", "why":"type/tf filter"}), 200

    ticker    = payload.get("ticker", "")
    direction = payload.get("direction", "")

    if not ticker or direction not in ("UP","DOWN"):
        return jsonify({"status":"ignored", "why":"bad payload"}), 200

    now = time.time()
    with lock:
        signals.append((now, ticker, direction, tf))

    print(f"‚úÖ {ticker} {direction} on {tf} at {time.strftime('%H:%M:%S')}")
    return jsonify({"status":"ok"}), 200

def cluster_worker():
    while True:
        try:
            now = time.time()
            cutoff = now - CLUSTER_WINDOW_MIN * 60

            with lock:
                # —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ
                while signals and signals[0][0] < cutoff:
                    signals.popleft()

                # –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ (–º–Ω–æ–∂–µ—Å—Ç–≤–æ)
                ups  = set()
                downs= set()
                tickers_seen = set()
                for (_, t, d, _) in signals:
                    tickers_seen.add(t)
                    if d == "UP": ups.add(t)
                    if d == "DOWN": downs.add(t)

            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ UP
            if len(ups) >= CLUSTER_THRESHOLD:
                if now - last_cluster_sent["UP"] >= CLUSTER_COOLDOWN_SEC:
                    msg = (f"üü¢ CLUSTER UP ‚Äî {len(ups)} –∏–∑ {len(tickers_seen)} –º–æ–Ω–µ—Ç (TF {VALID_TF}) "
                           f"–∑–∞ {CLUSTER_WINDOW_MIN} –º–∏–Ω.\n"
                           f"Tickers: {', '.join(sorted(list(ups)))}")
                    send_telegram(msg)
                    last_cluster_sent["UP"] = now

            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ DOWN
            if len(downs) >= CLUSTER_THRESHOLD:
                if now - last_cluster_sent["DOWN"] >= CLUSTER_COOLDOWN_SEC:
                    msg = (f"üî¥ CLUSTER DOWN ‚Äî {len(downs)} –∏–∑ {len(tickers_seen)} –º–æ–Ω–µ—Ç (TF {VALID_TF}) "
                           f"–∑–∞ {CLUSTER_WINDOW_MIN} –º–∏–Ω.\n"
                           f"Tickers: {', '.join(sorted(list(downs)))}")
                    send_telegram(msg)
                    last_cluster_sent["DOWN"] = now

        except Exception as e:
            print("cluster_worker error:", e)

        time.sleep(CHECK_INTERVAL_SEC)

# —Ñ–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
threading.Thread(target=cluster_worker, daemon=True).start()

@app.route("/")
def health():
    return "OK", 200

if __name__ == "__main__":
    # –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞; –Ω–∞ –ø—Ä–æ–¥–µ (Render/Railway) –±—É–¥–µ—Ç WSGI/ASGI
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "8080")))
